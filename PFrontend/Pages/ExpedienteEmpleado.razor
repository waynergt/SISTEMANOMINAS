@page "/expediente/{empleadoId:int}"
@inject ExpedienteService ExpedienteService
@inject HttpClient Http

<h4>Expediente del Empleado @empleadoId</h4>

@if (resultado == null)
{
    <p>Cargando...</p>
}
else
{
    @if (resultado.expedienteCompleto)
    {
        <div class="alert alert-success">Expediente completo.</div>
    }
    else
    {
        <div class="alert alert-danger">
            <b>Faltan documentos:</b>
            <ul>
                @foreach (var doc in resultado.documentosFaltantes)
                {
                    <li>@doc</li>
                }
            </ul>
        </div>
    }

    <h5>Documentos actuales</h5>
    @if (documentosEmpleado != null && documentosEmpleado.Any())
    {
        <ul>
            @foreach (var doc in documentosEmpleado)
            {
                <li>
                    @doc.TipoDocumento -
                    <a href="@doc.UrlArchivo" target="_blank">Ver</a>
                </li>
            }
        </ul>
    }
    else
    {
        <p>No hay documentos subidos.</p>
    }

    <h5>Subir nuevo documento</h5>
    <EditForm Model="nuevoDocumento" OnValidSubmit="SubirDocumento">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2">
            <label>Tipo de Documento</label>
            <InputText class="form-control" @bind-Value="nuevoDocumento.TipoDocumento" />
            <ValidationMessage For="@(() => nuevoDocumento.TipoDocumento)" />
        </div>
        <div class="mb-2">
            <label>Archivo</label>
            <InputFile OnChange="OnInputFileChange" />
            <ValidationMessage For="@(() => archivoSeleccionado)" />
        </div>
        <button class="btn btn-success" type="submit">Subir</button>
    </EditForm>
    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert alert-info">@mensaje</div>
    }
}

@code {
    [Parameter] public int empleadoId { get; set; }
    ExpedienteValidacionResult? resultado;
    List<DocumentoEmpleadoDto> documentosEmpleado = new();
    DocumentoEmpleadoDto nuevoDocumento = new();
    IBrowserFile? archivoSeleccionado;
    string? mensaje;

    protected override async Task OnInitializedAsync()
    {
        resultado = await ExpedienteService.ValidarExpediente(empleadoId);
        await CargarDocumentos();
        nuevoDocumento.EmpleadoId = empleadoId;
    }

    private async Task CargarDocumentos()
    {
        documentosEmpleado = await Http.GetFromJsonAsync<List<DocumentoEmpleadoDto>>($"api/documentoempleado/empleado/{empleadoId}") ?? new();
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        archivoSeleccionado = e.File;
    }

    private async Task SubirDocumento()
    {
        if (archivoSeleccionado == null)
        {
            mensaje = "Seleccione un archivo.";
            return;
        }

        var content = new MultipartFormDataContent();
        content.Add(new StringContent(nuevoDocumento.EmpleadoId.ToString()), "EmpleadoId");
        content.Add(new StringContent(nuevoDocumento.TipoDocumento ?? ""), "TipoDocumento");
        content.Add(new StreamContent(archivoSeleccionado.OpenReadStream(5_000_000)), "Archivo", archivoSeleccionado.Name);

        var response = await Http.PostAsync("api/documentoempleado", content);
        if (response.IsSuccessStatusCode)
        {
            mensaje = "Documento subido correctamente.";
            await CargarDocumentos();
            // Limpiar formulario
            nuevoDocumento.TipoDocumento = "";
            archivoSeleccionado = null;
        }
        else
        {
            mensaje = "Error al subir el documento.";
        }
    }

    public class DocumentoEmpleadoDto
    {
        public int Id { get; set; }
        public int EmpleadoId { get; set; }
        public string? TipoDocumento { get; set; }
        public string? UrlArchivo { get; set; }
        public DateTime FechaSubida { get; set; }
    }
}