@page "/empleados"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using PFrontend.Models
@using PFrontend.Models.PFrontend.Models

<h3><i class="bi bi-people-fill"></i> Lista de Empleados</h3>

@if (empleados == null)
{
    <p><em>Cargando empleados...</em></p>
}
else if (error != null)
{
    <div class="alert alert-danger">@error</div>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="AgregarEmpleado">
        <i class="bi bi-plus-circle"></i> Agregar Empleado
    </button>

    <table class="table table-bordered table-striped">
        <thead class="table-dark">
            <tr>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>DPI</th>
                <th>Departamento</th>
                <th>Puesto</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var emp in empleados)
            {
                <tr>
                    <td>@emp.Nombre</td>
                    <td>@emp.Apellido</td>
                    <td>@emp.Dpi</td>
                    <td>@emp.DepartamentoId</td>
                    <td>@emp.PuestoId</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="@(() => EditarEmpleado(emp.Id))">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="@(() => EliminarEmpleado(emp.Id))">
                            <i class="bi bi-trash3-fill"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Empleado>? empleados;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            empleados = await Http.GetFromJsonAsync<List<Empleado>>("https://localhost:7185/api/Empleados");
        }
        catch (Exception ex)
        {
            error = $"Error al cargar empleados: {ex.Message}";
            empleados = new List<Empleado>();
        }
    }

    void AgregarEmpleado() => Navigation.NavigateTo("/empleados/agregar");
    void EditarEmpleado(int id) => Navigation.NavigateTo($"/empleados/editar/{id}");

    async Task EliminarEmpleado(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro que deseas eliminar este empleado?");
        if (!confirm) return;

        var response = await Http.DeleteAsync($"https://localhost:7185/api/Empleados/{id}");
        if (response.IsSuccessStatusCode)
        {
            empleados = empleados!.Where(e => e.Id != id).ToList();
        }
        else
        {
            error = "No se pudo eliminar el empleado.";
        }
    }
}