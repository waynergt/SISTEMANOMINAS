@page "/empleados"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using PFrontend.Models
@inject AuthService AuthService
@using PFrontend.Services

<style>
    .empleados-bg {
        min-height: 100vh;
        background: linear-gradient(135deg, #232945 0%, #3949AB 100%);
        padding: 0;
        margin: 0;
    }
    .empleados-card {
        background: #fff;
        border-radius: 1.5rem;
        box-shadow: 0 4px 32px rgba(50, 50, 93, 0.13);
        max-width: 1200px;
        width: 99vw;
        margin: 2.5rem auto;
        padding: 2.5rem 2rem 2rem 2rem;
        position: relative;
    }
    .empleados-title {
        color: #232945;
        font-weight: 700;
        margin-bottom: 2rem;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: .7rem;
    }
    .btn-agregar {
        background: #3949AB;
        color: #fff;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        transition: background .2s, color .2s;
        padding: .5rem 1.1rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 10px #23294522;
        display: inline-flex;
        align-items: center;
        gap: .4rem;
    }
    .btn-agregar:hover, .btn-agregar:focus {
        background: #232945;
        color: #FFB300;
    }
    .btn-regresar {
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        background: #3949AB;
        color: #fff;
        border: none;
        border-radius: 1.5rem;
        padding: 0.55rem 1.5rem;
        font-weight: 600;
        font-size: 1rem;
        margin: 0 0 1.4rem 0;
        cursor: pointer;
        transition: background 0.2s, color 0.2s;
        box-shadow: 0 2px 10px rgba(57,73,171,0.08);
        position: absolute;
        left: 1.2rem;
        top: 1.2rem;
        z-index: 5;
    }
    .btn-regresar:hover, .btn-regresar:focus {
        background: #232945;
        color: #fff;
        text-decoration: none;
    }
    .table-empleados th, .table-empleados td {
        vertical-align: middle;
        text-align: center;
        color: #232945;
    }
    .table-empleados thead th {
        background: #3949AB;
        color: #fff;
        border-bottom: 2px solid #232945;
        font-weight: 600;
    }
    .table-empleados tbody tr:hover {
        background: #F5F6FA;
    }
    .table-empleados .btn-outline-primary {
        border-color: #3949AB;
        color: #3949AB;
    }
    .table-empleados .btn-outline-primary:hover {
        background: #3949AB;
        color: #fff;
    }
    .table-empleados .btn-outline-danger {
        border-color: #FF4848;
        color: #FF4848;
    }
    .table-empleados .btn-outline-danger:hover {
        background: #FF4848;
        color: #fff;
    }
    .table-empleados .btn-primary {
        background: #3949AB;
        border: none;
    }
    .table-empleados .btn-primary:hover {
        background: #232945;
        color: #FFB300;
    }
    .table-empleados .btn-success {
        background: #FFB300;
        border: none;
        color: #232945;
        font-weight: 600;
    }
    .table-empleados .btn-success:hover {
        background: #ffe49c;
        color: #232945;
    }
    .pagination .page-item.active .page-link {
        background: #3949AB;
        border-color: #3949AB;
        color: #fff;
    }
    .pagination .page-link {
        color: #3949AB;
    }
    .pagination .page-link:hover {
        color: #FFB300;
    }
    /* Modal */
    .modal-content {
        border-radius: 1.2rem;
        border: 2px solid #3949AB;
    }
    .modal-header {
        background: #F5F6FA;
        border-bottom: 1px solid #3949AB33;
    }
    .modal-title {
        color: #232945;
        font-weight: 600;
    }
    .modal-footer .btn-success {
        background: #3949AB;
        color: #fff;
        border: none;
    }
    .modal-footer .btn-success:hover {
        background: #232945;
        color: #FFB300;
    }
    .modal-footer .btn-secondary {
        background: #FFB300;
        color: #232945;
        border: none;
    }
    .modal-footer .btn-secondary:hover {
        background: #ffe49c;
        color: #232945;
    }
    media (max-width: 575px) {
        .empleados-card {
            padding: 1.3rem 0.4rem 1rem 0.4rem;
            max-width: 99vw;
        }
        .btn-regresar {
            left: .4rem;
            top: .4rem;
            font-size: 1.6rem;
            padding: 0.45rem 1.15rem;
        }
        .table-empleados th, .table-empleados td {
            font-size: 0.93rem;
        }
    }
</style>

<div class="empleados-bg">
    <div class="empleados-card position-relative">
        <!-- Si quieres regresar al dashboard o inicio, cámbialo aquí -->
        <button class="btn-regresar" @onclick="Regresar" title="Regresar">
            <i class="bi bi-arrow-left"></i> Regresar
        </button>
        <div class="empleados-title">
            <i class="bi bi-people-fill" style="font-size:2.2rem;color:#3949AB;background:#F5F6FA;border-radius:50%;padding:.5rem;"></i>
            Lista de Empleados
        </div>

        @if (!isAuthenticated)
        {
            <RedirectToLogin />
        }
        else
        {

        }

        @if (empleados == null)
        {
            <div class="d-flex align-items-center justify-content-center py-4">
                <div class="spinner-border text-primary me-2"></div>
                <span style="color:#3949AB;font-weight:600;">Cargando empleados...</span>
            </div>
        }
        else if (error != null)
        {
            <div class="alert alert-danger">@error</div>
        }
        else
        {
            <button class="btn-agregar mb-3" @onclick="AgregarEmpleado">
                <i class="bi bi-plus-circle"></i> Agregar Empleado
            </button>

            <div class="table-responsive">
                <table class="table table-bordered table-striped align-middle table-empleados">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Apellido</th>
                            <th>DPI</th>
                            <th>Departamento</th>
                            <th>Puesto</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var emp in PaginatedEmpleados)
                        {
                            <tr>
                                <td>@emp.Nombre</td>
                                <td>@emp.Apellido</td>
                                <td>@emp.Dpi</td>
                                <td>@emp.Departamento</td>
                                <td>@emp.Puesto</td>
                                <td>@emp.EstadoLaboral</td>
                                <td>
                                    <button class="btn btn-outline-primary btn-sm me-2" @onclick="@(() => EditarEmpleado(emp.Id))" title="Editar">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm me-2" @onclick="@(() => EliminarEmpleado(emp.Id))" title="Eliminar">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                    <button class="btn btn-primary btn-sm me-2" title="Ver Detalles" @onclick="() => VerDetalleEmpleado(emp.Id)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <nav aria-label="Paginación empleados" class="mt-3">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="@(() => GoToPage(currentPage - 1))">Anterior</button>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <li class="page-item @(currentPage == i ? "active" : "")">
                            <button class="page-link" @onclick="@(() => GoToPage(i))">@i</button>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="@(() => GoToPage(currentPage + 1))">Siguiente</button>
                    </li>
                </ul>
            </nav>
        }

        @if (mostrarModalSubir)
        {
            <div class="modal-backdrop fade show"></div>
            <div class="modal d-block" tabindex="-1" style="background:rgba(44,49,77,.16);">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title"><i class="bi bi-upload"></i> Subir Documento</h5>
                            <button type="button" class="btn-close" @onclick="CerrarModalSubir"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="@nuevoDocumento" OnValidSubmit="SubirDocumentoModal">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="mb-2">
                                    <label class="fw-semibold">Tipo de Documento</label>
                                    <InputSelect class="form-select" @bind-Value="nuevoDocumento.TipoDocumento">
                                        <option value="">Seleccione</option>
                                        @foreach (var tipo in tiposDocumento)
                                        {
                                            <option value="@tipo">@tipo</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-2">
                                    <label class="fw-semibold">Archivo</label>
                                    <InputFile OnChange="OnInputFileChange" />
                                </div>
                                <button class="btn btn-success" type="submit">
                                    <i class="bi bi-upload"></i> Subir
                                </button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private bool isAuthenticated;

    // Cambia este método para regresar al dashboard o donde desees
    private void Regresar()
    {
        Navigation.NavigateTo("/inicio"); // Cambia aquí si quieres otro destino
    }

    private List<Empleado>? empleados;
    private string? error;

    // Paginación
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages => empleados == null ? 1 : (int)Math.Ceiling((double)empleados.Count / pageSize);

    private IEnumerable<Empleado> PaginatedEmpleados =>
        empleados == null ? Enumerable.Empty<Empleado>() : empleados.Skip((currentPage - 1) * pageSize).Take(pageSize);

    private void GoToPage(int page)
    {
        if (page < 1) page = 1;
        if (page > totalPages) page = totalPages;
        currentPage = page;
    }

    // Modal subir documento
    private bool mostrarModalSubir = false;
    private int empleadoIdSeleccionado;
    private NuevoDocumentoModel nuevoDocumento = new();
    private IBrowserFile? archivoSeleccionado;
    private List<string> tiposDocumento = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            empleados = await Http.GetFromJsonAsync<List<Empleado>>("https://localhost:7185/api/Empleados");
            tiposDocumento = await Http.GetFromJsonAsync<List<string>>("https://localhost:7185/api/Expediente/tipos-obligatorios");
            // Autenticación, si tienes método en AuthService, actívalo aquí:
            // isAuthenticated = await AuthService.IsAuthenticatedAsync();
            isAuthenticated = true; // quita esto si usas el método real arriba
        }
        catch (Exception ex)
        {
            error = $"Error al cargar empleados: {ex.Message}";
            empleados = new List<Empleado>();
        }
    }

    void VerDetalleEmpleado(int id) => Navigation.NavigateTo($"/empleados/detalle/{id}");
    void AgregarEmpleado() => Navigation.NavigateTo("/empleados/agregar");
    void EditarEmpleado(int id) => Navigation.NavigateTo($"/empleados/editar/{id}");

    async Task EliminarEmpleado(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro que deseas eliminar este empleado?");
        if (!confirm) return;

        var response = await Http.DeleteAsync($"api/Empleados/{id}");
        if (response.IsSuccessStatusCode)
        {
            empleados = empleados!.Where(e => e.Id != id).ToList();
            if ((currentPage - 1) * pageSize >= empleados.Count && currentPage > 1)
                GoToPage(currentPage - 1);
        }
        else
        {
            error = "No se pudo eliminar el empleado.";
        }
    }

    void AbrirDialogoSubir(int empleadoId)
    {
        empleadoIdSeleccionado = empleadoId;
        mostrarModalSubir = true;
        nuevoDocumento = new();
        archivoSeleccionado = null;
    }

    void CerrarModalSubir()
    {
        mostrarModalSubir = false;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        archivoSeleccionado = e.File;
    }

    private async Task SubirDocumentoModal()
    {
        if (archivoSeleccionado == null || string.IsNullOrEmpty(nuevoDocumento.TipoDocumento))
        {
            await JS.InvokeVoidAsync("alert", "Seleccione tipo de documento y archivo.");
            return;
        }
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(empleadoIdSeleccionado.ToString()), "EmpleadoId");
        content.Add(new StringContent(nuevoDocumento.TipoDocumento), "TipoDocumento");
        content.Add(new StreamContent(archivoSeleccionado.OpenReadStream(10_000_000)), "Archivo", archivoSeleccionado.Name);

        var response = await Http.PostAsync("https://localhost:7185/api/Expediente/upload", content);
        if (response.IsSuccessStatusCode)
        {
            nuevoDocumento = new();
            archivoSeleccionado = null;
            mostrarModalSubir = false;
            await JS.InvokeVoidAsync("alert", "Documento subido con éxito.");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al subir el documento.");
        }
    }

    // Métodos para eliminar y editar documentos (cuando los muestres en la tabla, por ejemplo en Detalle)
    private async Task EliminarDocumento(int documentoId)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "¿Eliminar este documento?");
        if (!confirm) return;

        var response = await Http.DeleteAsync($"https://localhost:7185/api/Expediente/{documentoId}");
        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Documento eliminado con éxito.");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "No se pudo eliminar el documento.");
        }
    }

    private void EditarDocumento(DocumentoExpedienteDto doc)
    {
        // Aquí abres un modal similar al de subir, pero rellenas el modelo con los datos de doc
        // Si necesitas el código para editar, ¡pídemelo y te lo armo completo!
    }

    public class NuevoDocumentoModel
    {
        public string TipoDocumento { get; set; } = "";
    }

    public class DocumentoExpedienteDto
    {
        public int Id { get; set; }
        public string TipoDocumento { get; set; }
        public string RutaArchivo { get; set; }
        public DateTime FechaSubida { get; set; }
    }
}