@page "/reportes"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<style>
    .reportes-bg {
        min-height: 100vh;
        background: linear-gradient(135deg, #232945 0%, #3949AB 100%);
        padding: 0;
        margin: 0;
    }

    .reportes-card {
        background: #fff;
        border-radius: 1.5rem;
        box-shadow: 0 4px 32px rgba(50, 50, 93, 0.13);
        max-width: 500px;
        width: 98vw;
        margin: 2.5rem auto;
        padding: 2.5rem 2rem 2rem 2rem;
        position: relative;
    }

    .reportes-title {
        color: #232945;
        font-weight: 700;
        margin-bottom: 2rem;
        text-align: center;
    }

    .reporte-section {
        margin-bottom: 2rem;
    }

    .reporte-label {
        color: #3949AB;
        font-weight: 600;
        margin-bottom: .3rem;
    }

    .reporte-input,
    .reporte-input[type="date"] {
        border-radius: 8px;
        border: 1px solid #e0e2ea;
        padding: .5rem .9rem;
        outline: none;
        margin-bottom: 0;
        width: 100%;
        background: #f5f6fa;
        color: #232945;
    }

    .reporte-btn {
        width: 100%;
        background: #3949AB;
        color: #fff;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        margin-top: 1rem;
        margin-bottom: .6rem;
        transition: background .2s, color .2s;
        padding: .5rem 0;
        box-shadow: 0 2px 10px #23294522;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: .5rem;
    }

        .reporte-btn:hover, .reporte-btn:focus {
            background: #232945;
            color: #FFB300;
        }

    .btn-regresar {
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        background: #3949AB;
        color: #fff;
        border: none;
        border-radius: 1.5rem;
        padding: 0.55rem 1.5rem;
        font-weight: 600;
        font-size: 1rem;
        margin: 0 0 1.4rem 0;
        cursor: pointer;
        transition: background 0.2s, color 0.2s;
        box-shadow: 0 2px 10px rgba(57,73,171,0.08);
        position: absolute;
        left: 1.2rem;
        top: 1.2rem;
        z-index: 5;
    }

        .btn-regresar:hover, .btn-regresar:focus {
            background: #232945;
            color: #fff;
            text-decoration: none;
        }

    media (max-width: 575px) {
        .reportes-card

    {
        padding: 1.3rem 0.4rem 1rem 0.4rem;
        max-width: 99vw;
    }

    .btn-regresar {
        left: .4rem;
        top: .4rem;
        font-size: 1.6rem;
        padding: 0.45rem 1.15rem;
    }

    }
</style>

<div class="reportes-bg">
    <div class="reportes-card">
        <button class="btn-regresar" type="button" @onclick="Regresar" title="Regresar">
            <i class="bi bi-arrow-left"></i> Regresar
        </button>
        <div class="d-flex flex-column align-items-center mb-3">
            <i class="bi bi-file-earmark-text-fill" style="font-size:2.7rem;color:#3949AB;background:#F5F6FA;border-radius:50%;padding:.7rem;"></i>
        </div>
        <h3 class="reportes-title">Reportes PDF</h3>

        <div class="reporte-section">
            <label class="reporte-label" for="estado">Empleados por Estado</label>
            <input class="reporte-input mb-2" id="estado" @bind="estado" placeholder="Ej: Activo" />
            <button class="reporte-btn" @onclick="DescargarEmpleadosPorEstado">
                <i class="bi bi-download"></i> Descargar Empleados
            </button>
        </div>

        <div class="reporte-section">
            <label class="reporte-label" for="fechaini">Nómina por Período</label>
            <div class="row g-2 mb-2">
                <div class="col-6">
                    <input class="reporte-input" id="fechaini" type="date" @bind="fechaInicio" />
                </div>
                <div class="col-6">
                    <input class="reporte-input" id="fechafin" type="date" @bind="fechaFin" />
                </div>
            </div>
            <button class="reporte-btn" @onclick="DescargarNominaPorPeriodo">
                <i class="bi bi-download"></i> Descargar Nómina por Período
            </button>
        </div>

        <div class="reporte-section mb-0">
            <label class="reporte-label" for="dpi2">Expediente por DPI</label>
            <input class="reporte-input mb-2" id="dpi2" @bind="dpiBusquedaExpediente" placeholder="Ingrese DPI" />
            <button class="reporte-btn" @onclick="DescargarExpedientePorDpi">
                <i class="bi bi-download"></i> Descargar Expediente
            </button>
        </div>
    </div>
</div>

@code {
    private DateTime? fechaInicio;
    private DateTime? fechaFin;

    private string estado;
    private string dpi;
    private string dpiBusquedaExpediente;

    private void Regresar()
    {
        Navigation.NavigateTo("/inicio");
    }

    private async Task DescargarExpedientePorDpi()
    {
        if (string.IsNullOrWhiteSpace(dpiBusquedaExpediente))
        {
            await JS.InvokeVoidAsync("alert", "Ingrese un DPI válido.");
            return;
        }
        var url = $"api/Reporte/expediente-dpi?dpi={dpiBusquedaExpediente}";
        var bytes = await Http.GetByteArrayAsync(url);
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("descargarPDF", base64, $"expediente_{dpiBusquedaExpediente}.pdf");
    }

    private async Task DescargarNominaPorPeriodo()
    {
        if (fechaInicio is null || fechaFin is null)
        {
            await JS.InvokeVoidAsync("alert", "Seleccione ambas fechas.");
            return;
        }
        var url = $"api/Reporte/nomina-por-periodo?inicio={fechaInicio:yyyy-MM-dd}&fin={fechaFin:yyyy-MM-dd}";
        var bytes = await Http.GetByteArrayAsync(url);
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("descargarPDF", base64, $"reporte_nominas_{fechaInicio:yyyyMMdd}_{fechaFin:yyyyMMdd}.pdf");
    }

    private async Task DescargarEmpleadosPorEstado()
    {
        if (string.IsNullOrWhiteSpace(estado))
        {
            await JS.InvokeVoidAsync("alert", "Ingrese un estado de empleado");
            return;
        }

        var url = $"api/Reporte/empleados?estado={estado}";
        var bytes = await Http.GetByteArrayAsync(url);
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("descargarPDF", base64, $"reporte_empleados_{estado}.pdf");
    }

    private async Task DescargarDescuentosPorDpi()
    {
        if (string.IsNullOrWhiteSpace(dpi))
        {
            await JS.InvokeVoidAsync("alert", "Ingrese un DPI");
            return;
        }

        var url = $"api/Reporte/descuentos-dpi?dpi={dpi}";
        var bytes = await Http.GetByteArrayAsync(url);
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("descargarPDF", base64, $"reporte_descuentos_{dpi}.pdf");
    }
}