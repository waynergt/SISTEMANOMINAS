@page "/empleados/agregar"
@inject HttpClient Http
@inject NavigationManager Navigation
@using PFrontend.Models
@using PFrontend.Models.PFrontend.Models

<h3>Agregar Nuevo Empleado</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-success">@mensaje</div>
}

<EditForm Model="empleado" OnValidSubmit="GuardarEmpleado">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Nombre</label>
        <InputText class="form-control" @bind-Value="empleado.Nombre" />
    </div>
    <div class="mb-3">
        <label class="form-label">Apellido</label>
        <InputText class="form-control" @bind-Value="empleado.Apellido" />
    </div>
    <div class="mb-3">
        <label class="form-label">DPI</label>
        <InputText class="form-control" @bind-Value="empleado.Dpi" />
    </div>
    <div class="mb-3">
        <label class="form-label">Correo</label>
        <InputText class="form-control" @bind-Value="empleado.Correo" />
    </div>
    <div class="mb-3">
        <label class="form-label">Salario</label>
        <InputNumber class="form-control" @bind-Value="empleado.Salario" />
    </div>
    <div class="mb-3">
        <label class="form-label">Departamento</label>
        <InputSelect class="form-control" @bind-Value="empleado.DepartamentoId">
            <option value="">-- Selecciona un departamento --</option>
            @foreach (var dep in departamentos)
            {
                <option value="@dep.Id">@dep.Nombre</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Puesto</label>
        <InputSelect class="form-control" @bind-Value="empleado.PuestoId">
            <option value="">-- Selecciona un puesto --</option>
            @foreach (var pst in puestos)
            {
                <option value="@pst.Id">@pst.Nombre</option>
            }
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-success">Guardar</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="Volver">Cancelar</button>
</EditForm>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger mt-3">@error</div>
}

@if (!string.IsNullOrEmpty(jsonDebug))
{
    <div class="alert alert-info mt-3">
        <b>JSON enviado para depuración:</b>
        <pre>@jsonDebug</pre>
    </div>
}

@code {
    private Empleado empleado = new Empleado();
    private List<DepartamentoModelV2> departamentos = new();
    private List<PuestoModelV2> puestos = new();
    private string mensaje = "";
    private string error = "";
    private string jsonDebug = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            departamentos = await Http.GetFromJsonAsync<List<DepartamentoModelV2>>("https://localhost:7185/api/Departamento") ?? new List<DepartamentoModelV2>();
            puestos = await Http.GetFromJsonAsync<List<PuestoModelV2>>("https://localhost:7185/api/Puesto") ?? new List<PuestoModelV2>();
        }
        catch (Exception ex)
        {
            error = $"Error al cargar catálogos: {ex.Message}";
        }
    }

    private async Task GuardarEmpleado()
    {
        try
        {
            jsonDebug = System.Text.Json.JsonSerializer.Serialize(empleado, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });

            var response = await Http.PostAsJsonAsync("https://localhost:7185/api/Empleados", empleado);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Empleado agregado exitosamente.";
                await Task.Delay(1000);
                Navigation.NavigateTo("/empleados");
            }
            else
            {
                error = "Error al agregar el empleado. Por favor verifica los datos.";
            }
        }
        catch (Exception ex)
        {
            error = $"Error al agregar el empleado: {ex.Message}";
        }
    }

    private void Volver()
    {
        Navigation.NavigateTo("/empleados");
    }
}