@page "/empleados/agregar"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject PFrontend.Services.AlertService AlertService
@using PFrontend.Models

<style>
    .agregar-bg {
        min-height: 100vh;
        background: linear-gradient(135deg, #232945 0%, #3949AB 100%);
        padding: 0;
        margin: 0;
    }

    .agregar-card {
        background: #fff;
        border-radius: 1.5rem;
        box-shadow: 0 4px 32px rgba(50, 50, 93, 0.13);
        max-width: 540px;
        width: 98vw;
        margin: 2.5rem auto;
        padding: 2.5rem 2rem 2rem 2rem;
        position: relative;
    }

    .agregar-title {
        color: #232945;
        font-weight: 700;
        margin-bottom: 2rem;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: .7rem;
    }

    .btn-guardar {
        background: #3949AB;
        color: #fff;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        transition: background .2s, color .2s;
        padding: .5rem 1.1rem;
        box-shadow: 0 2px 10px #23294522;
        display: inline-flex;
        align-items: center;
        gap: .4rem;
    }

        .btn-guardar:hover, .btn-guardar:focus {
            background: #232945;
            color: #FFB300;
        }

    .btn-cancelar {
        background: #FFB300;
        color: #232945;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        margin-left: 0.5rem;
        padding: .5rem 1.1rem;
        transition: background .2s;
    }

        .btn-cancelar:hover {
            background: #ffe49c;
            color: #232945;
        }

    .btn-regresar {
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        background: #3949AB;
        color: #fff;
        border: none;
        border-radius: 1.5rem;
        padding: 0.55rem 1.5rem;
        font-weight: 600;
        font-size: 1rem;
        margin: 0 0 1.4rem 0;
        cursor: pointer;
        transition: background 0.2s, color 0.2s;
        box-shadow: 0 2px 10px rgba(57,73,171,0.08);
        position: absolute;
        left: 1.2rem;
        top: 1.2rem;
        z-index: 5;
    }

        .btn-regresar:hover, .btn-regresar:focus {
            background: #232945;
            color: #fff;
            text-decoration: none;
        }

    .form-label {
        color: #3949AB;
        font-weight: 600;
    }

    .form-control:focus {
        border-color: #3949AB;
        box-shadow: 0 0 0 2px #3949AB33;
    }

    .icon-person {
        font-size: 2.1rem;
        color: #3949AB;
        background: #F5F6FA;
        border-radius: 50%;
        padding: .55rem;
    }

    media (max-width: 575px) {
        .agregar-card

    {
        padding: 1.3rem 0.4rem 1rem 0.4rem;
        max-width: 99vw;
    }

    .btn-regresar {
        left: .4rem;
        top: .4rem;
        font-size: 1.6rem;
        padding: 0.45rem 1.15rem;
    }

    }
</style>

<div class="agregar-bg">
    <div class="agregar-card">
        <button class="btn-regresar" @onclick="Volver" title="Regresar">
            <i class="bi bi-arrow-left"></i> Regresar
        </button>
        <div class="agregar-title mb-2">
            <i class="bi bi-person-plus-fill icon-person"></i>
            Agregar Nuevo Empleado
        </div>
        <EditForm Model="nuevoEmpleado" OnValidSubmit="GuardarEmpleado">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label class="form-label">Nombre</label>
                <InputText class="form-control" @bind-Value="nuevoEmpleado.Nombre" />
            </div>
            <div class="mb-3">
                <label class="form-label">Apellido</label>
                <InputText class="form-control" @bind-Value="nuevoEmpleado.Apellido" />
            </div>
            <div class="mb-3">
                <label class="form-label">DPI</label>
                <InputText class="form-control" @bind-Value="nuevoEmpleado.Dpi" />
            </div>
            <div class="mb-3">
                <label class="form-label">Correo</label>
                <InputText class="form-control" @bind-Value="nuevoEmpleado.Correo" />
            </div>
            <div class="mb-3">
                <label class="form-label">Salario</label>
                <InputNumber class="form-control" @bind-Value="nuevoEmpleado.Salario" />
            </div>
            <div class="mb-3">
                <label class="form-label">Estado laboral</label>
                <InputSelect @bind-Value="nuevoEmpleado.EstadoLaboral" class="form-control">
                    <option value="">Seleccione estado</option>
                    <option value="Activo">Activo</option>
                    <option value="Suspendido">Suspendido</option>
                    <option value="Retirado">Retirado</option>
                </InputSelect>
            </div>
            <div class="mb-3">
                <label class="form-label">Departamento</label>
                <InputSelect @bind-Value="nuevoEmpleado.DepartamentoId" class="form-control">
                    <option value="0">Seleccione departamento</option>
                    @foreach (var dep in departamentos)
                    {
                        <option value="@dep.Id">@dep.Nombre</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label class="form-label">Puesto</label>
                <InputSelect @bind-Value="nuevoEmpleado.PuestoId" class="form-control">
                    <option value="0">Seleccione puesto</option>
                    @foreach (var puesto in puestos)
                    {
                        <option value="@puesto.Id">@puesto.Nombre</option>
                    }
                </InputSelect>
            </div>
            <button type="submit" class="btn-guardar">
                <i class="bi bi-save"></i> Guardar
            </button>
            <button type="button" class="btn-cancelar" @onclick="Volver">
                <i class="bi bi-x-circle"></i> Cancelar
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(jsonDebug))
        {
            <div class="alert alert-info mt-3">
                <b>JSON enviado para depuración:</b>
                <pre>@jsonDebug</pre>
            </div>
        }
    </div>
</div>

@code {
    private EmpleadoEditModel nuevoEmpleado = new();
    private List<DepartamentoModelV2> departamentos = new();
    private List<PuestoModelV2> puestos = new();
    private string jsonDebug = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            departamentos = await Http.GetFromJsonAsync<List<DepartamentoModelV2>>("https://localhost:7185/api/Departamento/activos") ?? new List<DepartamentoModelV2>();
            puestos = await Http.GetFromJsonAsync<List<PuestoModelV2>>("https://localhost:7185/api/Puesto/activos") ?? new List<PuestoModelV2>();
        }
        catch (Exception ex)
        {
            await AlertService.ShowAlert($"Error al cargar catálogos: {ex.Message}", PFrontend.Services.AlertService.AlertType.Error);
        }
    }

    private async Task GuardarEmpleado()
    {
        try
        {
            // Validaciones simples antes de enviar (puedes personalizar según tus reglas)
            if (string.IsNullOrWhiteSpace(nuevoEmpleado.Nombre) ||
                string.IsNullOrWhiteSpace(nuevoEmpleado.Apellido) ||
                string.IsNullOrWhiteSpace(nuevoEmpleado.Dpi) ||
                string.IsNullOrWhiteSpace(nuevoEmpleado.Correo) ||
                nuevoEmpleado.Salario <= 0 ||
                string.IsNullOrWhiteSpace(nuevoEmpleado.EstadoLaboral) ||
                nuevoEmpleado.DepartamentoId == 0 ||
                nuevoEmpleado.PuestoId == 0)
            {
                await AlertService.ShowAlert("Por favor llena todos los campos obligatorios.", PFrontend.Services.AlertService.AlertType.Warning);
                return;
            }

            var response = await Http.PostAsJsonAsync("https://localhost:7185/api/Empleados", nuevoEmpleado);
            if (response.IsSuccessStatusCode)
            {
                await AlertService.ShowAlert("Empleado agregado exitosamente.", PFrontend.Services.AlertService.AlertType.Success);
                await Task.Delay(1000);
                Navigation.NavigateTo("/empleados");
            }
            else
            {
                await AlertService.ShowAlert("Error al agregar el empleado. Por favor verifica los datos.", PFrontend.Services.AlertService.AlertType.Error);
            }
        }
        catch (Exception ex)
        {
            await AlertService.ShowAlert($"Error al agregar el empleado: {ex.Message}", PFrontend.Services.AlertService.AlertType.Error);
        }
    }

    private void Volver()
    {
        Navigation.NavigateTo("/empleados"); // Siempre regresa a la lista, NO history.back
    }
}