@page "/puestos"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<style>
    .puestos-bg {
        min-height: 100vh;
        background: linear-gradient(135deg, #232945 0%, #3949AB 100%);
        padding: 0;
        margin: 0;
    }

    .puestos-card {
        background: #fff;
        border-radius: 1.5rem;
        box-shadow: 0 4px 32px rgba(50, 50, 93, 0.13);
        max-width: 540px;
        width: 98vw;
        margin: 2.5rem auto;
        padding: 2.5rem 2rem 2rem 2rem;
        position: relative;
    }

    .puestos-title {
        color: #232945;
        font-weight: 700;
        margin-bottom: 2rem;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: .7rem;
    }

    .btn-agregar {
        background: #3949AB;
        color: #fff;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        transition: background .2s, color .2s;
        padding: .5rem 1.1rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 10px #23294522;
        display: inline-flex;
        align-items: center;
        gap: .4rem;
    }

        .btn-agregar:hover, .btn-agregar:focus {
            background: #232945;
            color: #FFB300;
        }

    .btn-toggle {
        border: none;
        border-radius: 8px;
        font-weight: 600;
        padding: .3rem .9rem;
        background: #E0E7FF;
        color: #232945;
        transition: background .2s, color .2s;
        box-shadow: 0 1px 4px #23294522;
    }

        .btn-toggle.activo {
            background: #43aa8b;
            color: #fff;
        }

        .btn-toggle.inactivo {
            background: #FF4848;
            color: #fff;
        }

    .form-label {
        color: #3949AB;
        font-weight: 600;
    }

    .form-control:focus {
        border-color: #3949AB;
        box-shadow: 0 0 0 2px #3949AB33;
    }

    .btn-regresar {
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        background: #3949AB;
        color: #fff;
        border: none;
        border-radius: 1.5rem;
        padding: 0.55rem 1.5rem;
        font-weight: 600;
        font-size: 1rem;
        margin: 0 0 1.4rem 0;
        cursor: pointer;
        transition: background 0.2s, color 0.2s;
        box-shadow: 0 2px 10px rgba(57,73,171,0.08);
        position: absolute;
        left: 1.2rem;
        top: 1.2rem;
        z-index: 5;
    }

        .btn-regresar:hover, .btn-regresar:focus {
            background: #232945;
            color: #fff;
            text-decoration: none;
        }

    media (max-width: 575px) {
        .puestos-card

    {
        padding: 1.3rem 0.4rem 1rem 0.4rem;
        max-width: 99vw;
    }

    .puestos-title {
        font-size: 1.2rem;
    }

    .btn-regresar {
        left: .4rem;
        top: .4rem;
        font-size: 1.6rem;
        padding: 0.45rem 1.15rem;
    }

    }
</style>

<div class="puestos-bg">
    <div class="puestos-card">
        <button class="btn-regresar" type="button" @onclick="Regresar" title="Regresar">
            <i class="bi bi-arrow-left"></i> Regresar
        </button>
        <div class="puestos-title mb-3">
            <i class="bi bi-briefcase-fill icon-person"></i> Puestos
        </div>
        @if (puestos == null)
        {
            <div class="d-flex align-items-center justify-content-center py-4">
                <div class="spinner-border text-primary me-2"></div>
                <span style="color:#3949AB;font-weight:600;">Cargando...</span>
            </div>
        }
        else
        {
            <button class="btn-agregar mb-2" @onclick="MostrarAgregar">
                <i class="bi bi-plus-circle"></i> Agregar Puesto
            </button>
            <div class="table-responsive">
                <table class="table align-middle">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Nombre</th>
                            <th>Estado</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var puesto in puestos)
                        {
                            <tr>
                                <td>@puesto.Id</td>
                                <td>@puesto.Nombre</td>
                                <td>
                                    <button class="btn-toggle @(puesto.Activo ? "activo" : "inactivo")"
                                            title="Cambiar estado"
                                            @onclick="() => CambiarEstado(puesto)">
                                        @(puesto.Activo ? "Activo" : "Inactivo")
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if (mostrarFormulario)
        {
            <EditForm Model="puestoActual" OnValidSubmit="GuardarPuesto">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-2">
                    <label class="form-label">Nombre:</label>
                    <InputText class="form-control" @bind-Value="puestoActual.Nombre" />
                </div>
                <button class="btn btn-primary" type="submit"><i class="bi bi-save"></i> Guardar</button>
                <button class="btn btn-secondary ms-2" type="button" @onclick="CerrarFormulario"><i class="bi bi-x-circle"></i> Cancelar</button>
            </EditForm>
        }
    </div>
</div>

@code {
    List<PuestoDto>? puestos;
    PuestoDto puestoActual = new();
    bool mostrarFormulario = false;
    bool esEdicion = false;

    private void Regresar()
    {
        Navigation.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarPuestos();
    }

    async Task CargarPuestos()
    {
        puestos = await Http.GetFromJsonAsync<List<PuestoDto>>("api/puesto");
    }

    void MostrarAgregar()
    {
        puestoActual = new PuestoDto { Activo = true };
        esEdicion = false;
        mostrarFormulario = true;
    }

    async Task GuardarPuesto()
    {
        if (esEdicion)
        {
            await Http.PutAsJsonAsync($"api/puesto/{puestoActual.Id}", puestoActual);
        }
        else
        {
            await Http.PostAsJsonAsync("api/puesto", puestoActual);
        }
        mostrarFormulario = false;
        await CargarPuestos();
        StateHasChanged();
    }

    void CerrarFormulario()
    {
        mostrarFormulario = false;
    }

    async Task CambiarEstado(PuestoDto puesto)
    {
        puesto.Activo = !puesto.Activo;
        await Http.PutAsJsonAsync($"api/puesto/{puesto.Id}", puesto);
        await CargarPuestos();
        StateHasChanged();
    }

    public class PuestoDto
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public bool Activo { get; set; }
    }
}