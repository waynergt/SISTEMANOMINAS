@page "/empleados/detalle/{EmpleadoId:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Detalle del Empleado</h3>

@if (empleado == null)
{
    <p>Cargando empleado...</p>
}
else
{
    <div class="card mb-3">
        <div class="card-body">
            <h5>@empleado.Nombre @empleado.Apellido</h5>
            <p><b>DPI:</b> @empleado.Dpi</p>
            <p><b>Departamento:</b> @empleado.DepartamentoId</p>
            <p><b>Puesto:</b> @empleado.PuestoId</p>
            <!-- Puedes agregar más campos aquí -->
        </div>
    </div>

    <h4>Información Académica</h4>

    @if (informaciones == null)
    {
        <p>Cargando información académica...</p>
    }
    else if (!informaciones.Any())
    {
        <p>No hay información académica registrada.</p>
    }
    else
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Título</th>
                    <th>Institución</th>
                    <th>Fecha de Graduación</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var info in informaciones)
                {
                    <tr>
                        <td>@info.Titulo</td>
                        <td>@info.Institucion</td>
                        <td>@info.FechaGraduacion.ToShortDateString()</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarInfo(info.Id)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h5>Agregar Información Académica</h5>
    <EditForm Model="@nuevaInfo" OnValidSubmit="AgregarInformacionAcademica">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-2">
            <label class="form-label">Título</label>
            <InputText class="form-control" @bind-Value="nuevaInfo.Titulo" />
        </div>
        <div class="mb-2">
            <label class="form-label">Institución</label>
            <InputText class="form-control" @bind-Value="nuevaInfo.Institucion" />
        </div>
        <div class="mb-2">
            <label class="form-label">Fecha de Graduación</label>
            <InputDate class="form-control" @bind-Value="nuevaInfo.FechaGraduacion" />
        </div>
        <button class="btn btn-success" type="submit">Agregar</button>
    </EditForm>

    <h4 class="mt-4">Expediente del Empleado</h4>

    @if (expedienteVal == null)
    {
        <p>Cargando estado del expediente...</p>
    }
    else if (expedienteVal.ExpedienteCompleto)
    {
        <p class="alert alert-success">Expediente completo</p>
    }
    else
    {
        <p class="alert alert-warning">Faltan documentos: @string.Join(", ", expedienteVal.DocumentosFaltantes)</p>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Tipo de Documento</th>
                <th>Archivo</th>
                <th>Fecha de Subida</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doc in documentos)
            {
                <tr>
                    <td>@doc.TipoDocumento</td>
                    <td>
                        <a href="@doc.RutaArchivo" target="_blank">Ver archivo</a>
                    </td>
                    <td>@doc.FechaSubida.ToShortDateString()</td>
                    <td>
                        <a class="btn btn-outline-primary btn-sm" href="@doc.RutaArchivo" target="_blank">Ver</a>
                        <a class="btn btn-outline-secondary btn-sm ms-1" href="@doc.RutaArchivo" target="_blank" download>Descargar</a>
                        <button class="btn btn-warning btn-sm ms-1" @onclick="() => EditarDocumento(doc)">Editar</button>
                        <button class="btn btn-danger btn-sm ms-1" @onclick="() => EliminarDocumento(doc.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h5>Agregar Documento</h5>
    <EditForm Model="@nuevoDocumento" OnValidSubmit="SubirDocumento">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-2">
            <label>Tipo de Documento</label>
            <InputSelect class="form-select" @bind-Value="nuevoDocumento.TipoDocumento">
                <option value="">Seleccione</option>
                @foreach (var tipo in tiposDocumento)
                {
                    <option value="@tipo">@tipo</option>
                }
            </InputSelect>
        </div>
        <div class="mb-2">
            <label>Archivo</label>
            <InputFile OnChange="OnInputFileChange" />
        </div>
        <button class="btn btn-success" type="submit">Subir</button>
    </EditForm>
}

<button class="btn btn-secondary mt-3" @onclick="VolverALista">Volver a lista</button>

@code {
    [Parameter]
    public int EmpleadoId { get; set; }

    // Datos del empleado
    private Empleado? empleado;

    // Información académica
    private List<InformacionAcademicaDto> informaciones = new();
    private NuevaInformacionAcademicaDto nuevaInfo = new();

    // Expediente
    private List<DocumentoExpedienteDto> documentos = new();
    private ExpedienteValidacionDto expedienteVal = new();
    private List<string> tiposDocumento = new();
    private NuevoDocumentoModel nuevoDocumento = new();
    private IBrowserFile? archivoSeleccionado;

    protected override async Task OnInitializedAsync()
    {
        await CargarEmpleado();
        await CargarInformacionAcademica();
        nuevaInfo.EmpleadoId = EmpleadoId;

        tiposDocumento = await Http.GetFromJsonAsync<List<string>>("https://localhost:7185/api/Expediente/tipos-obligatorios");

        await CargarExpediente();
    }

    private async Task CargarEmpleado()
    {
        empleado = await Http.GetFromJsonAsync<Empleado>($"https://localhost:7185/api/Empleados/{EmpleadoId}");
    }

    private async Task CargarInformacionAcademica()
    {
        informaciones = await Http.GetFromJsonAsync<List<InformacionAcademicaDto>>($"https://localhost:7185/api/InformacionAcademica/empleado/{EmpleadoId}");
    }

    private async Task AgregarInformacionAcademica()
    {
        nuevaInfo.EmpleadoId = EmpleadoId;
        var response = await Http.PostAsJsonAsync("https://localhost:7185/api/InformacionAcademica", nuevaInfo);
        if (response.IsSuccessStatusCode)
        {
            nuevaInfo = new NuevaInformacionAcademicaDto { EmpleadoId = EmpleadoId };
            await CargarInformacionAcademica();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al agregar información académica.");
        }
    }

    private async Task EliminarInfo(int infoId)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "¿Eliminar este registro académico?");
        if (!confirm) return;

        var response = await Http.DeleteAsync($"https://localhost:7185/api/InformacionAcademica/{infoId}");
        if (response.IsSuccessStatusCode)
        {
            await CargarInformacionAcademica();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "No se pudo eliminar la información académica.");
        }
    }

    // -- Expediente empleado --
    private async Task CargarExpediente()
    {
        documentos = await Http.GetFromJsonAsync<List<DocumentoExpedienteDto>>($"https://localhost:7185/api/Expediente/empleado/{EmpleadoId}");
        expedienteVal = await Http.GetFromJsonAsync<ExpedienteValidacionDto>($"https://localhost:7185/api/Expediente/validar2/{EmpleadoId}");
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        archivoSeleccionado = e.File;
    }

    private async Task SubirDocumento()
    {
        if (archivoSeleccionado == null || string.IsNullOrEmpty(nuevoDocumento.TipoDocumento))
        {
            await JS.InvokeVoidAsync("alert", "Seleccione tipo de documento y archivo.");
            return;
        }
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(EmpleadoId.ToString()), "EmpleadoId");
        content.Add(new StringContent(nuevoDocumento.TipoDocumento), "TipoDocumento");
        content.Add(new StreamContent(archivoSeleccionado.OpenReadStream(10_000_000)), "Archivo", archivoSeleccionado.Name);

        var response = await Http.PostAsync("https://localhost:7185/api/Expediente/upload", content);
        if (response.IsSuccessStatusCode)
        {
            nuevoDocumento = new();
            archivoSeleccionado = null;
            await CargarExpediente();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al subir el documento.");
        }
    }

    private async Task EliminarDocumento(int documentoId)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "¿Eliminar este documento?");
        if (!confirm) return;

        var response = await Http.DeleteAsync($"https://localhost:7185/api/Expediente/{documentoId}");
        if (response.IsSuccessStatusCode)
        {
            await CargarExpediente();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "No se pudo eliminar el documento.");
        }
    }

    private void EditarDocumento(DocumentoExpedienteDto doc)
    {
        // Aquí abres un modal similar al de subir, pero rellenas el modelo con los datos de doc
        // Si necesitas el código para editar, ¡pídemelo y te lo armo completo!
    }

    void VolverALista() => Navigation.NavigateTo("/empleados");

    // Modelos auxiliares
    public class InformacionAcademicaDto
    {
        public int Id { get; set; }
        public string Titulo { get; set; }
        public string Institucion { get; set; }
        public DateTime FechaGraduacion { get; set; }
        public int EmpleadoId { get; set; }
    }
    public class NuevaInformacionAcademicaDto
    {
        public string Titulo { get; set; }
        public string Institucion { get; set; }
        public DateTime FechaGraduacion { get; set; } = DateTime.Today;
        public int EmpleadoId { get; set; }
    }
    public class Empleado
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string Dpi { get; set; }
        public int DepartamentoId { get; set; }
        public int PuestoId { get; set; }
    }
    public class DocumentoExpedienteDto
    {
        public int Id { get; set; }
        public string TipoDocumento { get; set; }
        public string RutaArchivo { get; set; }
        public DateTime FechaSubida { get; set; }
    }
    public class ExpedienteValidacionDto
    {
        public bool ExpedienteCompleto { get; set; }
        public List<string> DocumentosFaltantes { get; set; }
    }
    public class NuevoDocumentoModel
    {
        public string TipoDocumento { get; set; } = "";
    }
}