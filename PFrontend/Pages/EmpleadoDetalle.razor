@page "/empleados/detalle/{EmpleadoId:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<style>
    .empleado-detalle-bg {
        min-height: 100vh;
        background: linear-gradient(135deg, #232945 0%, #3949AB 100%);
        padding: 0;
        margin: 0;
    }

    .empleado-detalle-card {
        background: #fff;
        border-radius: 1.5rem;
        box-shadow: 0 4px 24px rgba(50, 50, 93, 0.13);
        max-width: 900px;
        width: 98vw;
        margin: 2.5rem auto;
        padding: 2.5rem 2rem 2rem 2rem;
        position: relative;
    }

    .btn-regresar {
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        background: #3949AB;
        color: #fff;
        border: none;
        border-radius: 1.5rem;
        padding: 0.55rem 1.5rem;
        font-weight: 600;
        font-size: 1rem;
        margin: 0 0 1.4rem 0;
        cursor: pointer;
        transition: background 0.2s, color 0.2s;
        box-shadow: 0 2px 10px rgba(57,73,171,0.08);
        position: absolute;
        left: 1.2rem;
        top: 1.2rem;
        z-index: 5;
    }

        .btn-regresar:hover, .btn-regresar:focus {
            background: #232945;
            color: #fff;
            text-decoration: none;
        }

    .card-title-main {
        color: #232945;
        font-weight: 700;
        margin-bottom: 1.2rem;
        text-align: center;
    }

    .section-title {
        color: #3949AB;
        font-weight: 700;
        margin-top: 2.1rem;
        margin-bottom: 1rem;
    }

    .form-label {
        color: #3949AB;
        font-weight: 600;
    }

    .table th, .table td {
        vertical-align: middle;
        text-align: center;
        color: #232945;
    }

    .table thead th {
        background: #3949AB;
        color: #fff;
        border-bottom: 2px solid #232945;
        font-weight: 600;
    }

    .table tbody tr:hover {
        background: #F5F6FA;
    }

    .btn-success {
        background: #3949AB;
        color: #fff;
        border: none;
        font-weight: 600;
        border-radius: 8px;
        transition: background .2s, color .2s;
    }

        .btn-success:hover {
            background: #232945;
            color: #FFB300;
        }

    .btn-secondary {
        background: #FFB300;
        color: #232945;
        border: none;
        font-weight: 600;
        border-radius: 8px;
        transition: background .2s, color .2s;
    }

        .btn-secondary:hover {
            background: #ffe49c;
            color: #232945;
        }

    .btn-warning {
        color: #fff;
        background: #FFB300;
        border: none;
    }

        .btn-warning:hover {
            background: #ffe49c;
            color: #232945;
        }
    media (max-width: 575px) {
        .empleado-detalle-card

    {
        padding: 1.3rem 0.4rem 1rem 0.4rem;
        max-width: 99vw;
    }

    .btn-regresar {
        left: .4rem;
        top: .4rem;
        font-size: 1.6rem;
        padding: 0.45rem 1.15rem;
    }

    .table th, .table td {
        font-size: 0.95rem;
    }

    }
</style>

<div class="empleado-detalle-bg">
    <div class="empleado-detalle-card">
        <button class="btn-regresar" @onclick="VolverALista" title="Volver">
            <i class="bi bi-arrow-left"></i> Regresar
        </button>
        <div class="card-title-main">
            <i class="bi bi-person-badge" style="font-size:2.2rem;color:#3949AB;background:#F5F6FA;border-radius:50%;padding:.5rem;"></i>
            Detalle del Empleado
        </div>

        @if (empleado == null)
        {
            <p>Cargando empleado...</p>
        }
        else
        {
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">@empleado.Nombre @empleado.Apellido</h5>
                    <p><b>DPI:</b> @empleado.Dpi</p>
                    <p><b>Departamento:</b> @empleado.DepartamentoId</p>
                    <p><b>Puesto:</b> @empleado.PuestoId</p>
                    <!-- Puedes agregar más campos aquí -->
                </div>
            </div>

            <div class="section-title">Información Académica</div>
            @if (informaciones == null)
            {
                <p>Cargando información académica...</p>
            }
            else if (!informaciones.Any())
            {
                <p>No hay información académica registrada.</p>
            }
            else
            {
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Título</th>
                            <th>Institución</th>
                            <th>Fecha de Graduación</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var info in informaciones)
                        {
                            <tr>
                                <td>@info.Titulo</td>
                                <td>@info.Institucion</td>
                                <td>@info.FechaGraduacion.ToShortDateString()</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="() => EliminarInfo(info.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            <h5 class="mt-3 mb-2">Agregar Información Académica</h5>
            <EditForm Model="@nuevaInfo" OnValidSubmit="AgregarInformacionAcademica">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-2">
                    <label class="form-label">Título</label>
                    <InputText class="form-control" @bind-Value="nuevaInfo.Titulo" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Institución</label>
                    <InputText class="form-control" @bind-Value="nuevaInfo.Institucion" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Fecha de Graduación</label>
                    <InputDate class="form-control" @bind-Value="nuevaInfo.FechaGraduacion" />
                </div>
                <button class="btn btn-success" type="submit">Agregar</button>
            </EditForm>

            <div class="section-title">Expediente del Empleado</div>
            @if (expedienteVal == null)
            {
                <p>Cargando estado del expediente...</p>
            }
            else if (expedienteVal.ExpedienteCompleto)
            {
                <p class="alert alert-success">Expediente completo</p>
            }
            else
            {
                <p class="alert alert-warning">Faltan documentos: @string.Join(", ", expedienteVal.DocumentosFaltantes)</p>
            }

            <table class="table">
                <thead>
                    <tr>
                        <th>Tipo de Documento</th>
                        <th>Archivo</th>
                        <th>Fecha de Subida</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var doc in documentos)
                    {
                        <tr>
                            <td>@doc.TipoDocumento</td>
                            <td>
                                <a href="@doc.RutaArchivo" target="_blank">Ver archivo</a>
                            </td>
                            <td>@doc.FechaSubida.ToShortDateString()</td>
                            <td>
                                <a class="btn btn-outline-primary btn-sm" href="@doc.RutaArchivo" target="_blank">Ver</a>
                                <a class="btn btn-outline-secondary btn-sm ms-1" href="@doc.RutaArchivo" download>Descargar</a>
                                <button class="btn btn-warning btn-sm ms-1" @onclick="() => EditarDocumento(doc)">Editar</button>
                                <button class="btn btn-danger btn-sm ms-1" @onclick="() => EliminarDocumento(doc.Id)">Eliminar</button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>

            <h5 class="mt-3 mb-2">Agregar Documento</h5>
            <EditForm Model="@nuevoDocumento" OnValidSubmit="SubirDocumento">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-2">
                    <label class="form-label">Tipo de Documento</label>
                    <InputSelect class="form-select" @bind-Value="nuevoDocumento.TipoDocumento">
                        <option value="">Seleccione</option>
                        @foreach (var tipo in tiposDocumento)
                        {
                            <option value="@tipo">@tipo</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-2">
                    <label class="form-label">Archivo</label>
                    <InputFile OnChange="OnInputFileChange" />
                </div>
                <button class="btn btn-success" type="submit">Subir</button>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int EmpleadoId { get; set; }

    // Datos del empleado
    private Empleado? empleado;

    // Información académica
    private List<InformacionAcademicaDto> informaciones = new();
    private NuevaInformacionAcademicaDto nuevaInfo = new();

    // Expediente
    private List<DocumentoExpedienteDto> documentos = new();
    private ExpedienteValidacionDto expedienteVal = new();
    private List<string> tiposDocumento = new();
    private NuevoDocumentoModel nuevoDocumento = new();
    private IBrowserFile? archivoSeleccionado;

   
    protected override async Task OnInitializedAsync()
    {
        await CargarEmpleado();
        await CargarInformacionAcademica();
        nuevaInfo.EmpleadoId = EmpleadoId;

        tiposDocumento = await Http.GetFromJsonAsync<List<string>>("https://localhost:7185/api/Expediente/tipos-obligatorios");

        await CargarExpediente();
    }

    private async Task CargarEmpleado()
    {
        empleado = await Http.GetFromJsonAsync<Empleado>($"https://localhost:7185/api/Empleados/{EmpleadoId}");
    }

    private async Task CargarInformacionAcademica()
    {
        informaciones = await Http.GetFromJsonAsync<List<InformacionAcademicaDto>>($"https://localhost:7185/api/InformacionAcademica/empleado/{EmpleadoId}");
    }

    private async Task AgregarInformacionAcademica()
    {
        nuevaInfo.EmpleadoId = EmpleadoId;
        var response = await Http.PostAsJsonAsync("https://localhost:7185/api/InformacionAcademica", nuevaInfo);
        if (response.IsSuccessStatusCode)
        {
            nuevaInfo = new NuevaInformacionAcademicaDto { EmpleadoId = EmpleadoId };
            await CargarInformacionAcademica();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al agregar información académica.");
        }
    }

    private async Task EliminarInfo(int infoId)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "¿Eliminar este registro académico?");
        if (!confirm) return;

        var response = await Http.DeleteAsync($"https://localhost:7185/api/InformacionAcademica/{infoId}");
        if (response.IsSuccessStatusCode)
        {
            await CargarInformacionAcademica();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "No se pudo eliminar la información académica.");
        }
    }

    // -- Expediente empleado --
    private async Task CargarExpediente()
    {
        documentos = await Http.GetFromJsonAsync<List<DocumentoExpedienteDto>>($"https://localhost:7185/api/Expediente/empleado/{EmpleadoId}");
        expedienteVal = await Http.GetFromJsonAsync<ExpedienteValidacionDto>($"https://localhost:7185/api/Expediente/validar2/{EmpleadoId}");
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        archivoSeleccionado = e.File;
    }

    private async Task SubirDocumento()
    {
        if (archivoSeleccionado == null || string.IsNullOrEmpty(nuevoDocumento.TipoDocumento))
        {
            await JS.InvokeVoidAsync("alert", "Seleccione tipo de documento y archivo.");
            return;
        }
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(EmpleadoId.ToString()), "EmpleadoId");
        content.Add(new StringContent(nuevoDocumento.TipoDocumento), "TipoDocumento");
        content.Add(new StreamContent(archivoSeleccionado.OpenReadStream(10_000_000)), "Archivo", archivoSeleccionado.Name);

        var response = await Http.PostAsync("https://localhost:7185/api/Expediente/upload", content);
        if (response.IsSuccessStatusCode)
        {
            nuevoDocumento = new();
            archivoSeleccionado = null;
            await CargarExpediente();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al subir el documento.");
        }
    }

    private async Task EliminarDocumento(int documentoId)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "¿Eliminar este documento?");
        if (!confirm) return;

        var response = await Http.DeleteAsync($"https://localhost:7185/api/Expediente/{documentoId}");
        if (response.IsSuccessStatusCode)
        {
            await CargarExpediente();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "No se pudo eliminar el documento.");
        }
    }

    private void EditarDocumento(DocumentoExpedienteDto doc)
    {
        // Aquí abres un modal similar al de subir, pero rellenas el modelo con los datos de doc
        // Si necesitas el código para editar, ¡pídemelo y te lo armo completo!
    }

    void VolverALista() => Navigation.NavigateTo("/empleados");

    // Modelos auxiliares
    public class InformacionAcademicaDto
    {
        public int Id { get; set; }
        public string Titulo { get; set; }
        public string Institucion { get; set; }
        public DateTime FechaGraduacion { get; set; }
        public int EmpleadoId { get; set; }
    }
    public class NuevaInformacionAcademicaDto
    {
        public string Titulo { get; set; }
        public string Institucion { get; set; }
        public DateTime FechaGraduacion { get; set; } = DateTime.Today;
        public int EmpleadoId { get; set; }
    }
    public class Empleado
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string Dpi { get; set; }
        public int DepartamentoId { get; set; }
        public int PuestoId { get; set; }
    }
    public class DocumentoExpedienteDto
    {
        public int Id { get; set; }
        public string TipoDocumento { get; set; }
        public string RutaArchivo { get; set; }
        public DateTime FechaSubida { get; set; }
    }
    public class ExpedienteValidacionDto
    {
        public bool ExpedienteCompleto { get; set; }
        public List<string> DocumentosFaltantes { get; set; }
    }
    public class NuevoDocumentoModel
    {
        public string TipoDocumento { get; set; } = "";
    }
}