@page "/nomina"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<style>
    .nomina-bg {
        min-height: 100vh;
        background: linear-gradient(135deg, #232945 0%, #3949AB 100%);
        padding: 0;
        margin: 0;
    }

    .nomina-card {
        background: #fff;
        border-radius: 1.5rem;
        box-shadow: 0 4px 32px rgba(50, 50, 93, 0.13);
        max-width: 1000px;
        width: 98vw;
        margin: 2.5rem auto;
        padding: 2.5rem 2rem 2rem 2rem;
        position: relative;
    }

    .nomina-title {
        color: #232945;
        font-weight: 700;
        margin-bottom: 2rem;
        text-align: center;
    }

    .btn-generar {
        background: #3949AB;
        color: #fff;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        transition: background .2s, color .2s;
        padding: .6rem 1.3rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 10px #23294522;
        display: inline-flex;
        align-items: center;
        gap: .4rem;
    }

        .btn-generar:hover, .btn-generar:focus {
            background: #232945;
            color: #FFB300;
        }

    .btn-regresar {
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        background: #3949AB;
        color: #fff;
        border: none;
        border-radius: 1.5rem;
        padding: 0.55rem 1.5rem;
        font-weight: 600;
        font-size: 1rem;
        margin: 0 0 1.4rem 0;
        cursor: pointer;
        transition: background 0.2s, color 0.2s;
        box-shadow: 0 2px 10px rgba(57,73,171,0.08);
        position: absolute;
        left: 1.2rem;
        top: 1.2rem;
        z-index: 5;
    }

        .btn-regresar:hover, .btn-regresar:focus {
            background: #232945;
            color: #fff;
            text-decoration: none;
        }

    .table-nominas th, .table-nominas td {
        vertical-align: middle;
        text-align: center;
        color: #232945;
    }

    .table-nominas thead th {
        background: #3949AB;
        color: #fff;
        border-bottom: 2px solid #232945;
        font-weight: 600;
    }

    .table-nominas tbody tr:hover {
        background: #F5F6FA;
    }

    .table-nominas .btn-primary {
        background: #3949AB;
        border: none;
    }

        .table-nominas .btn-primary:hover {
            background: #232945;
            color: #FFB300;
        }

    .detalle-title {
        color: #3949AB;
        font-weight: 700;
        margin-top: 1.8rem;
        margin-bottom: 1.1rem;
    }

    .btn-cerrar {
        background: #FFB300;
        border: none;
        color: #232945;
        font-weight: 500;
        border-radius: 7px;
        padding: .36rem 1.1rem;
        margin-bottom: 0.8rem;
        transition: background .2s;
    }

        .btn-cerrar:hover {
            background: #ffcb46;
            color: #232945;
        }

    .btn-descargar {
        background: #3949AB;
        border: none;
        color: #fff;
        border-radius: 7px;
        font-weight: 500;
        padding: .36rem 1.1rem;
    }

        .btn-descargar:hover {
            background: #232945;
            color: #FFB300;
        }

    .modal-content {
        border-radius: 1.2rem;
        border: 2px solid #3949AB;
    }

    .modal-header {
        background: #F5F6FA;
        border-bottom: 1px solid #3949AB33;
    }

    .modal-title {
        color: #232945;
        font-weight: 600;
    }

    .modal-footer .btn-primary {
        background: #3949AB;
        border: none;
    }

        .modal-footer .btn-primary:hover {
            background: #232945;
            color: #FFB300;
        }

    .modal-footer .btn-secondary {
        background: #FFB300;
        color: #232945;
        border: none;
    }

        .modal-footer .btn-secondary:hover {
            background: #ffe49c;
            color: #232945;
        }
    media (max-width: 575px) {
        .nomina-card

    {
        padding: 1.3rem 0.4rem 1rem 0.4rem;
        max-width: 99vw;
    }

    .btn-regresar {
        left: .4rem;
        top: .4rem;
        font-size: 1.6rem;
        padding: 0.45rem 1.15rem;
    }

    .table-nominas th, .table-nominas td {
        font-size: 0.95rem;
    }

    }
</style>

<div class="nomina-bg">
    <div class="nomina-card position-relative">
        <button class="btn-regresar" @onclick="Regresar" title="Regresar">
            <i class="bi bi-arrow-left"></i> Regresar
        </button>
        <div class="d-flex flex-column align-items-center mb-2">
            <i class="bi bi-cash-coin" style="font-size:2.4rem;color:#3949AB;background:#F5F6FA;border-radius:50%;padding:.7rem;"></i>
        </div>
        <h3 class="nomina-title">Nómina por Período</h3>

        <button class="btn-generar mb-3" @onclick="AbrirGenerarNomina">
            <i class="bi bi-plus-circle"></i> Generar nueva nómina
        </button>

        @if (nominas is null)
        {
            <div class="d-flex align-items-center justify-content-center py-4">
                <div class="spinner-border text-primary me-2"></div>
                <span style="color:#3949AB;font-weight:600;">Cargando nóminas...</span>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-bordered table-nominas align-middle">
                    <thead>
                        <tr>
                            <th>Periodo</th>
                            <th>Fecha Inicio</th>
                            <th>Fecha Fin</th>
                            <th>Monto Total</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var n in PaginatedNominas)
                        {
                            <tr>
                                <td>@n.Periodo</td>
                                <td>@n.FechaInicio.ToShortDateString()</td>
                                <td>@n.FechaFin.ToShortDateString()</td>
                                <td>@n.MontoTotal.ToString("C")</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" @onclick="() => VerDetalle(n.Id)">
                                        <i class="bi bi-search"></i> Ver Detalle
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <!-- PAGINACIÓN -->
            <nav aria-label="Paginación nóminas" class="mt-3">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">Anterior</button>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <li class="page-item @(currentPage == i ? "active" : "")">
                            <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">Siguiente</button>
                    </li>
                </ul>
            </nav>
        }

        <!-- MODAL DETALLE NOMINA -->
        @if (mostrarDetalle && nominaDetalle != null)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background:rgba(44,49,77,.16);z-index:2000;">
                <div class="modal-dialog modal-xl modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-footer">
                            @if (nominaDetalle != null && nominaDetalle.Detalles.Count > 1)
                            {
                                <button class="btn btn-descargar" @onclick="DescargarNominaCompleta">
                                    <i class="bi bi-download"></i> Descargar Nómina Completa
                                </button>
                            }
                            <button class="btn btn-secondary" @onclick="CerrarDetalle">
                                <i class="bi bi-x-circle"></i> Cerrar
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3"><b>Fecha inicio:</b> @nominaDetalle.FechaInicio.ToShortDateString() &nbsp; <b>Fecha fin:</b> @nominaDetalle.FechaFin.ToShortDateString()</div>
                            <div class="table-responsive">
                                <table class="table table-sm table-striped align-middle">
                                    <thead>
                                        <tr>
                                            <th>Empleado</th>
                                            <th>Salario Base</th>
                                            <th>Horas Extras</th>
                                            <th>Bonificaciones</th>
                                            <th>Descuentos</th>
                                            <th>IGSS</th>
                                            <th>IRTRA</th>
                                            <th>ISR</th>
                                            <th>Total Pagar</th>
                                            <th>Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var d in nominaDetalle.Detalles)
                                        {
                                            <tr>
                                                <td>@(d.Empleado?.Nombre) @(d.Empleado?.Apellido)</td>
                                                <td>@d.SalarioBase.ToString("C")</td>
                                                <td>@d.HorasExtras</td>
                                                <td>@d.Bonificaciones.ToString("C")</td>
                                                <td>@d.Descuentos.ToString("C")</td>
                                                <td>@d.IGSS.ToString("C")</td>
                                                <td>@d.IRTRA.ToString("C")</td>
                                                <td>@d.ISR.ToString("C")</td>
                                                <td class="fw-bold">@d.TotalPagar.ToString("C")</td>
                                                <td>
                                                    <button class="btn btn-primary btn-sm" @onclick="@(() => VerReciboEmpleado(d))">
                                                        <i class="bi bi-eye"></i> Ver Recibo
                                                    </button>
                                                    <button class="btn btn-descargar btn-sm ms-2" @onclick="@(() => DescargarReciboEmpleado(d))">
                                                        <i class="bi bi-download"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="CerrarDetalle">
                                <i class="bi bi-x-circle"></i> Cerrar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        }

        <!-- MODAL RECIBO EMPLEADO -->
        @if (mostrarReciboEmpleado && reciboActual != null)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background:rgba(44,49,77,.26);z-index:3000;">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Recibo de Nómina - @reciboActual.Empleado?.Nombre @reciboActual.Empleado?.Apellido</h5>
                            <button type="button" class="btn-close" @onclick="CerrarReciboEmpleado"></button>
                        </div>
                        <div class="modal-body">
                            <table class="table table-bordered">
                                <tbody>
                                    <tr><th>Salario Base</th><td>@reciboActual.SalarioBase.ToString("C")</td></tr>
                                    <tr><th>Horas Extras</th><td>@reciboActual.HorasExtras</td></tr>
                                    <tr><th>Bonificaciones</th><td>@reciboActual.Bonificaciones.ToString("C")</td></tr>
                                    <tr><th>Descuentos</th><td>@reciboActual.Descuentos.ToString("C")</td></tr>
                                    <tr><th>IGSS</th><td>@reciboActual.IGSS.ToString("C")</td></tr>
                                    <tr><th>IRTRA</th><td>@reciboActual.IRTRA.ToString("C")</td></tr>
                                    <tr><th>ISR</th><td>@reciboActual.ISR.ToString("C")</td></tr>
                                    <tr class="fw-bold"><th>Total a Pagar</th><td>@reciboActual.TotalPagar.ToString("C")</td></tr>
                                </tbody>
                            </table>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="CerrarReciboEmpleado">
                                <i class="bi bi-x-circle"></i> Cerrar
                            </button>
                            <button class="btn btn-descargar" @onclick="() => DescargarReciboEmpleado(reciboActual)">
                                <i class="bi bi-download"></i> Descargar Recibo
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        }

        <!-- Modal para generar nómina -->
        @if (mostrarGenerar)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background:rgba(44,49,77,.16);">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title"><i class="bi bi-plus-circle"></i> Generar nueva nómina</h5>
                            <button type="button" class="btn-close" @onclick="CerrarGenerarNomina"></button>
                        </div>
 
                        <div class="modal-body">
                            <label>Empleado (opcional):</label>
                            <InputSelect @bind-Value="nuevaNomina.EmpleadoId" class="form-control mb-2">
                                <option value="">Todos los empleados</option>
                                @foreach (var emp in empleados)
                                {
                                    <option value="@emp.Id">@emp.Nombre @emp.Apellido</option>
                                }
                            </InputSelect>
                            <label class="fw-semibold">Fecha Inicio:</label>
                            <InputDate @bind-Value="nuevaNomina.FechaInicio" class="form-control mb-2" />
                            <label class="fw-semibold">Fecha Fin:</label>
                            <InputDate @bind-Value="nuevaNomina.FechaFin" class="form-control mb-2" />
                            <label class="fw-semibold">Periodo (ej. 2025-05-Q1):</label>
                            <InputText @bind-Value="nuevaNomina.Periodo" class="form-control mb-2" />
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-primary" @onclick="GenerarNomina">
                                <i class="bi bi-check-circle"></i> Generar
                            </button>
                            <button class="btn btn-secondary" @onclick="CerrarGenerarNomina">
                                <i class="bi bi-x-circle"></i> Cancelar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        }
    </div>
</div>

@code {

    async Task DescargarNominaCompleta()
    {
        // Suponiendo que tienes (o crearás) un endpoint: api/Nomina/descargar-completa?nominaId={id}
        var url = $"https://localhost:7185/api/Nomina/descargar-completa?nominaId={nominaDetalle?.Id}";
        await JS.InvokeVoidAsync("open", url, "_blank");
    }
    private void Regresar() => Navigation.NavigateTo("/inicio");

    private List<EmpleadoDto> empleados = new();

    private async Task CargarEmpleados()
    {
        empleados = await Http.GetFromJsonAsync<List<EmpleadoDto>>("https://localhost:7185/api/Empleados");
    }

    private List<NominaDto>? nominas;
    private NominaDetalleDto? nominaDetalle;
    private bool mostrarDetalle = false;

    private bool mostrarGenerar = false;
    private NuevaNominaDto nuevaNomina = new();

    // Para Recibo por Empleado
    private DetalleNominaDto? reciboActual;
    private bool mostrarReciboEmpleado = false;

    // PAGINACIÓN
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages => nominas == null ? 1 : (int)Math.Ceiling((double)nominas.Count / pageSize);

    private IEnumerable<NominaDto> PaginatedNominas =>
        nominas == null ? Enumerable.Empty<NominaDto>() : nominas.Skip((currentPage - 1) * pageSize).Take(pageSize);

    private void GoToPage(int page)
    {
        if (page < 1) page = 1;
        if (page > totalPages) page = totalPages;
        currentPage = page;
    }

   
    protected override async Task OnInitializedAsync()
    {
        await CargarEmpleados();
        await CargarNominas();
    }

    async Task CargarNominas()
    {
        nominas = await Http.GetFromJsonAsync<List<NominaDto>>("api/Nomina");
        if (currentPage > totalPages)
            currentPage = totalPages;
        StateHasChanged();
    }

    async Task VerDetalle(int nominaId)
    {
        nominaDetalle = await Http.GetFromJsonAsync<NominaDetalleDto>($"api/Nomina/{nominaId}");
        mostrarDetalle = true;
    }

    void CerrarDetalle()
    {
        mostrarDetalle = false;
        nominaDetalle = null;
    }

    void AbrirGenerarNomina()
    {
        nuevaNomina = new();
        mostrarGenerar = true;
    }

    void CerrarGenerarNomina()
    {
        mostrarGenerar = false;

    }
    bool isLoading = false;
    string? errorMsg = null;

    async Task GenerarNomina()
    {
        errorMsg = null;
        if (nuevaNomina.FechaInicio > nuevaNomina.FechaFin)
        {
            errorMsg = "La fecha de inicio debe ser anterior o igual a la fecha fin.";
            return;
        }
        if (string.IsNullOrWhiteSpace(nuevaNomina.Periodo))
        {
            errorMsg = "El periodo no puede estar vacío.";
            return;
        }
        isLoading = true;
        StateHasChanged();

        var response = await Http.PostAsJsonAsync("api/Nomina/generar", nuevaNomina);
        isLoading = false;
        if (response.IsSuccessStatusCode)
        {
            mostrarGenerar = false;
            await CargarNominas();
            await JS.InvokeVoidAsync("alert", "¡Nómina generada con éxito!");
        }
        else
        {
            errorMsg = "Error generando nómina: " + await response.Content.ReadAsStringAsync();
        }
    }

    // --------- RECIBO EMPLEADO ---------
    void VerReciboEmpleado(DetalleNominaDto dto)
    {
        reciboActual = dto;
        mostrarReciboEmpleado = true;
    }

    void CerrarReciboEmpleado()
    {
        mostrarReciboEmpleado = false;
        reciboActual = null;
    }

    // Simulado: descarga recibo PDF individual (debes implementar en backend y ajustar aquí si deseas)
    async Task DescargarReciboEmpleado(DetalleNominaDto dto)
    {
        // Supón que tienes un endpoint: api/Nomina/recibo-pdf?nominaId={id}&empleadoId={id}
        var url = $"https://localhost:7185/api/Nomina/recibo-pdf?nominaId={nominaDetalle?.Id}&empleadoId={dto.Empleado?.Id}";
        await JS.InvokeVoidAsync("open", url, "_blank");
    }

    // --------- MODELOS ---------
    public class NominaDto
    {
        public int Id { get; set; }
        public string Periodo { get; set; } = "";
        public DateTime FechaInicio { get; set; }
        public DateTime FechaFin { get; set; }
        public decimal MontoTotal { get; set; }
    }

    public class NominaDetalleDto : NominaDto
    {
        public List<DetalleNominaDto> Detalles { get; set; } = new();
    }

    public class DetalleNominaDto
    {
        public int Id { get; set; }
        public EmpleadoDto? Empleado { get; set; }
        public decimal SalarioBase { get; set; }
        public decimal HorasExtras { get; set; }
        public decimal Bonificaciones { get; set; }
        public decimal Descuentos { get; set; }
        public decimal IGSS { get; set; }
        public decimal IRTRA { get; set; }
        public decimal ISR { get; set; }
        public decimal TotalPagar { get; set; }
    }

    public class EmpleadoDto
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = "";
        public string Apellido { get; set; } = "";
    }

    public class NuevaNominaDto
    {
        public DateTime FechaInicio { get; set; } = DateTime.Today;
        public DateTime FechaFin { get; set; } = DateTime.Today;
        public string Periodo { get; set; } = "";
        public int? EmpleadoId { get; set; } // ← nuevo
    }
}